# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import filesync_server.pb.rpc_pb2 as rpc__pb2
import grpc


class FileSyncRpcStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
          channel: A grpc.Channel.
        """
        self.GetPatch = channel.unary_unary(
            '/filesyncrpc.FileSyncRpc/GetPatch',
            request_serializer=rpc__pb2.File.SerializeToString,
            response_deserializer=rpc__pb2.Patch.FromString,
        )


class FileSyncRpcServicer(object):
    """Interface exported by the server.
    """

    def GetPatch(self, request, context):
        """A simple RPC.

        Obtains patch of the given file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileSyncRpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetPatch': grpc.unary_unary_rpc_method_handler(
            servicer.GetPatch,
            request_deserializer=rpc__pb2.File.FromString,
            response_serializer=rpc__pb2.Patch.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'filesyncrpc.FileSyncRpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
